// Core Dependencies
import { Application, NextFunction } from 'express';
import { Request, Response } from 'express-serve-static-core';
import cors from 'cors';
import morgan from 'morgan';
import swaggerUi from 'swagger-ui-express';
import helmet from 'helmet';
import compression from 'compression';
import InitiateDB from '../config/db';
import { RegisterRoutes } from './routes/routes';
import { NODE_ENV, BASE_URL, FRONT_END_PATH, PUBLIC_DIR  } from '../config';
import express from "express";
import basicAuth from 'express-basic-auth';
import bodyParser from 'body-parser';
import logger from './utils/logger';
import expressErrorHandlerMiddleware from './middlewares/express.error';
import { refreshToken } from './utils/tokenizer';
const swaggerDocument = require('../../docs/swagger.json');
import paystack from './paystack/index';
import telegramInstance from './social/telegram'
import miniAppRouter from './controllers/mini-app';

telegramInstance
const intervals = [ 3, 5,  7, 10];
// Instance of express
const app: express.Application = express();

//app.use(xhub({ algorithm: 'sha1', secret: FACEBOOK_APP_SECRET || (()=> {throw new Error('FACEBOOK_APP_SECRET is not defined') })() }));
// Initiate Database Connection
InitiateDB();

// Middlewares
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json({
  verify: (req, res, buf) => {
    req.rawBody = buf.toString();
  }
},
));
app.use(bodyParser.json({ limit: '50mb' }));
app.use(compression());
// set end point for ping and respond with pong
app.get('/ping', (req, res) => {
  res.send('pong');
}
);

app.use('/mini-app', miniAppRouter);

app.use('/paystack', paystack);
app.use(cors({
  credentials: true, methods: 'GET,HEAD,PUT,PATCH,POST,DELETE', preflightContinue: false, origin: '*',
}));

app.use('/webhook/telegram', (req, res, next) => {
  // console.log(req.body)
  res.status(200).end();
})

RegisterRoutes(app)  // apply the routes generated by tsoa during tsoa routes

// create and start the swagger server
app.use('/api-docs', basicAuth({
  users: { 'admin': 'admin' },
  challenge: true,
  realm: 'Imb4T3st4pp',
}), swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// serve the public files
// app.use(express.static(FRONT_END_PATH));
app.use(express.static(PUBLIC_DIR));
// every request for public files that is found should be cached for 3 days
app.use('/', (req, res, next) => {
  // set header to allow caching for 3 days
  res.setHeader('Cache-Control', 'public, max-age=259200');
  next();
})

app.use('/', (req, res, next) => {
  // if not found, then redirect to remove catche and send the request to the frontend
  if (res.statusCode === 404) {
    // remove the cache header
    res.removeHeader('Cache-Control');
  }
  next();
})

// create a post route handler for revalidating token
//this is not exposed in the api docs for security reasons
// and is mainly implemented for nextjs users whose session expires in about a day
// so that the can periodically revalidate their token as far as they are sure the user is still logged in

app.post('/revalidate', async (req: Request, res: any) => {
  const token = req.headers['x-auth-token'];
  if (!token) {
    return res.status(401).json({
      message: 'No token provided',
      status: 401,
    });
  }
  const newToken = await refreshToken(token);
  res.set('x-auth-token', newToken);
  res.status(200).json({
    message: 'Token revalidated',
    status: 200,
  });
});

// paystack webhook
app.post('/paystack/webhook', async (req, res) => {
  // console.log(req.body)
  res.status(200).json({
    message: 'success',
    status: 200,
  });
});

if (NODE_ENV === 'DEVELOPMENT') {
  app.use(morgan('dev'));
  app.use(helmet());
} else {
  app.use(morgan('tiny'));
}

app.use((err: any, req: Request, res: Response, next: NextFunction) => {
  expressErrorHandlerMiddleware(err, req, res, next);
});
// Routers


// for every uncaught error, log the error and send a 500 error
process.on('uncaughtException', (err) => {
  // log the error using the logger
  logger.error(err);
})

export default app;